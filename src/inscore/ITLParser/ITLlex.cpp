#line 1 "ITLlex.cpp"

#line 3 "ITLlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define ITL_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer ITL_create_buffer
#endif

#ifdef yy_delete_buffer
#define ITL_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer ITL_delete_buffer
#endif

#ifdef yy_scan_buffer
#define ITL_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer ITL_scan_buffer
#endif

#ifdef yy_scan_string
#define ITL_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string ITL_scan_string
#endif

#ifdef yy_scan_bytes
#define ITL_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes ITL_scan_bytes
#endif

#ifdef yy_init_buffer
#define ITL_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer ITL_init_buffer
#endif

#ifdef yy_flush_buffer
#define ITL_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer ITL_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define ITL_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state ITL_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define ITL_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer ITL_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define ITLpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state ITLpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define ITLpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state ITLpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define ITLensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack ITLensure_buffer_stack
#endif

#ifdef yylex
#define ITLlex_ALREADY_DEFINED
#else
#define yylex ITLlex
#endif

#ifdef yyrestart
#define ITLrestart_ALREADY_DEFINED
#else
#define yyrestart ITLrestart
#endif

#ifdef yylex_init
#define ITLlex_init_ALREADY_DEFINED
#else
#define yylex_init ITLlex_init
#endif

#ifdef yylex_init_extra
#define ITLlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ITLlex_init_extra
#endif

#ifdef yylex_destroy
#define ITLlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ITLlex_destroy
#endif

#ifdef yyget_debug
#define ITLget_debug_ALREADY_DEFINED
#else
#define yyget_debug ITLget_debug
#endif

#ifdef yyset_debug
#define ITLset_debug_ALREADY_DEFINED
#else
#define yyset_debug ITLset_debug
#endif

#ifdef yyget_extra
#define ITLget_extra_ALREADY_DEFINED
#else
#define yyget_extra ITLget_extra
#endif

#ifdef yyset_extra
#define ITLset_extra_ALREADY_DEFINED
#else
#define yyset_extra ITLset_extra
#endif

#ifdef yyget_in
#define ITLget_in_ALREADY_DEFINED
#else
#define yyget_in ITLget_in
#endif

#ifdef yyset_in
#define ITLset_in_ALREADY_DEFINED
#else
#define yyset_in ITLset_in
#endif

#ifdef yyget_out
#define ITLget_out_ALREADY_DEFINED
#else
#define yyget_out ITLget_out
#endif

#ifdef yyset_out
#define ITLset_out_ALREADY_DEFINED
#else
#define yyset_out ITLset_out
#endif

#ifdef yyget_leng
#define ITLget_leng_ALREADY_DEFINED
#else
#define yyget_leng ITLget_leng
#endif

#ifdef yyget_text
#define ITLget_text_ALREADY_DEFINED
#else
#define yyget_text ITLget_text
#endif

#ifdef yyget_lineno
#define ITLget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno ITLget_lineno
#endif

#ifdef yyset_lineno
#define ITLset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno ITLset_lineno
#endif

#ifdef yyget_column
#define ITLget_column_ALREADY_DEFINED
#else
#define yyget_column ITLget_column
#endif

#ifdef yyset_column
#define ITLset_column_ALREADY_DEFINED
#else
#define yyset_column ITLset_column
#endif

#ifdef yywrap
#define ITLwrap_ALREADY_DEFINED
#else
#define yywrap ITLwrap
#endif

#ifdef yyget_lval
#define ITLget_lval_ALREADY_DEFINED
#else
#define yyget_lval ITLget_lval
#endif

#ifdef yyset_lval
#define ITLset_lval_ALREADY_DEFINED
#else
#define yyset_lval ITLset_lval
#endif

#ifdef yyget_lloc
#define ITLget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc ITLget_lloc
#endif

#ifdef yyset_lloc
#define ITLset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc ITLset_lloc
#endif

#ifdef yyalloc
#define ITLalloc_ALREADY_DEFINED
#else
#define yyalloc ITLalloc
#endif

#ifdef yyrealloc
#define ITLrealloc_ALREADY_DEFINED
#else
#define yyrealloc ITLrealloc
#endif

#ifdef yyfree
#define ITLfree_ALREADY_DEFINED
#else
#define yyfree ITLfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ITLwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[231] =
    {   0,
        0,    0,   26,   26,   28,   28,   41,   41,   44,   44,
       55,   55,   68,   68,    0,    0,   81,   79,   78,    9,
        9,   17,   37,   25,   72,   15,   39,   76,   77,   14,
       10,   74,   11,   75,   13,    1,   73,   71,   21,   70,
       19,   56,   79,   47,   79,   79,   47,   47,   79,   26,
       27,   26,   28,   28,   28,   28,   41,   43,   41,   44,
       46,   44,   55,   55,   80,   68,   66,   67,   80,   65,
       80,   62,   60,   61,   80,   80,    0,    0,    0,   78,
       25,    0,    0,   38,   32,   40,   31,   56,    0,    0,
       56,   56,    2,   56,    0,    0,   12,    0,   56,    3,

       48,   56,    0,    0,   59,    4,    1,   56,   56,   22,
        0,   18,   20,    0,   47,   47,    0,   47,   47,   47,
       47,    0,   26,   27,   26,   28,   29,   30,   41,   41,
       44,   44,   55,   55,    0,   54,   68,   61,   62,    0,
        0,   61,    0,    0,   50,   16,    0,    0,   32,    0,
        0,    0,   56,    4,   56,   56,    0,    0,   56,   56,
        0,    4,   56,   56,    6,   51,    0,    0,    0,    0,
       57,   47,   47,   47,   47,   58,   61,   63,   64,   33,
       34,   57,   58,   35,    4,    6,   51,    0,   36,    0,
        0,    0,    0,   24,   23,   57,   57,   47,   42,    8,

       47,   58,   58,   63,   64,   35,    0,   36,    0,    0,
        5,   52,    0,   47,    0,   69,    0,    0,    0,   47,
       69,   49,    0,    7,    0,    0,    0,    0,   53,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,    1,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   27,   27,   28,   29,   27,
       27,   27,   27,   27,   27,   27,   27,   30,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       31,   32,   33,   34,   35,    1,   36,   27,   37,   27,

       38,   27,   27,   39,   40,   41,   27,   42,   43,   44,
       27,   45,   27,   46,   47,   48,   27,   49,   39,   50,
       27,   27,   51,   52,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[54] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    1,    5,
        6,    6,    7,    8,    9,   10,    1,    1,   11,   12,
        2,    2,    2,    2,    7,    1,   13,   13,   13,   13,
       14,    2,    1,   15,   16,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,    2,    1
    } ;

static const flex_int16_t yy_base[259] =
    {   0,
        0,    0,   51,   53,   55,   58,   54,   57,   55,   60,
       69,   71,   65,   67,   96,    0,  865,   63,  148,   65,
       67,   73,  853,  134,  173,  136,  847,  143,  140,  132,
      226,  147,  279,  149,  332,  382, 1431, 1431,   70,  832,
      806,  144,  151,  429,  482, 1431,  535,  303,  588,    0,
      167,  193, 1431,  243,  792,  790,  757, 1431,  166,  751,
     1431,  218,  383,  385,  745,    0, 1431, 1431, 1431, 1431,
        0,  174, 1431,  400,    0,    0,  231,  615,  283,  393,
     1431,  751,  752, 1431,  665, 1431, 1431,  227,    0,    0,
      383,  336,  703,  393,    0,    0, 1431,    0,  403,  719,

     1431,  723,  716,  285,  339,  713,  729,  742,  749, 1431,
      191, 1431, 1431,  631,    0,  691,  664,  386,  642,  650,
      630,  587,    0,  389,  414,  420, 1431, 1431,  588,  279,
      577,  332,  724,  749,  577, 1431,    0,    0,  303,    0,
        0,  746,  565,  541,    0, 1431,  488,  410,    0,  557,
      534,  771,  756,  548,  594,  765,  549,  795,  539,  844,
      435,  809,  671,  776,  848,  852,  493,  509,  705,  831,
      891,  694,  499,  472,  461,  944,    0,    0,    0,  486,
      539,    0,    0,  997,  834,  766,  777,  472, 1050,  469,
      860,  872,  435,  594,  629,    0,    0,  151,    0,    0,

      392,    0,    0,    0,    0,    0,  668,    0,  866,  869,
      895,  769,  445,  426,  736,  852,  720,  431,  388,  371,
     1431,  947,  353,  303,  285,  196,  117,   40, 1431, 1431,
     1103, 1119, 1135, 1151, 1167, 1183, 1199, 1209, 1225, 1241,
     1257, 1273, 1289,   51, 1299, 1309, 1316, 1324, 1331, 1339,
     1355, 1361, 1371, 1381, 1391, 1401, 1408, 1417
    } ;

static const flex_int16_t yy_def[259] =
    {   0,
      230,    1,  231,  231,  232,  232,  233,  233,  234,  234,
      235,  235,  236,  236,  230,   15,  230,  237,  230,  237,
      237,  237,  230,  237,  230,  237,  230,  237,  237,  238,
      230,  237,  230,  237,  230,   33,  230,  230,  230,  230,
      230,  238,  237,  230,  230,  230,  230,   44,  230,  239,
      230,  239,  230,  230,  230,  230,  240,  230,  240,  241,
      230,  241,  242,  242,  242,  243,  230,  230,  230,  230,
      244,  245,  230,  246,  247,  248,  237,   25,  237,  230,
      230,  230,  230,  230,  230,  230,  230,  238,  249,  250,
       31,   31,   31,   31,   45,   49,  230,  251,   33,   33,

      230,   33,   78,  237,   35,   78,   33,   33,   33,  230,
      230,  230,  230,  237,   44,   47,   45,   47,   44,   44,
       44,   49,  239,  230,  239,  230,  230,  230,  240,  240,
      241,  241,  242,  242,  242,  230,  243,  252,  245,  247,
      248,  246,  247,  248,   78,  230,  237,  237,   85,  249,
      250,   78,   31,   78,   31,   31,  230,   78,   33,   33,
       78,  237,   31,   33,   33,   33,  230,  230,  237,  237,
      230,   47,   44,   44,   44,  230,  252,  253,  254,  237,
      237,  255,  256,  230,  237,   31,   31,  257,  230,   78,
      237,  237,  230,  237,  237,  255,  171,   47,   44,   44,

       44,  256,  176,  253,  254,  184,  258,  189,  237,  237,
      237,  237,  230,   47,  230,  237,  258,   78,  230,   47,
      230,  237,  230,   47,  230,  230,  230,  230,  230,    0,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230
    } ;

static const flex_int16_t yy_nxt[1485] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   44,   44,   44,
       45,   46,   18,   18,   47,   44,   44,   48,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       49,   46,   18,   51,   52,   51,   52,   54,   54,   58,
       54,   54,   58,  138,   61,   55,  138,   56,   55,   61,
       56,   64,   64,   64,   64,   67,   68,   67,   68,   78,
       79,   78,   79,   78,   79,   59,   62,  229,   59,   78,
       79,   62,  110,   65,  111,   65,   69,   70,   70,   70,

       69,   69,   69,   71,   69,   69,   69,   69,   72,   72,
       70,   72,   69,   73,   72,   69,   70,   69,   69,   69,
       72,   69,   74,   74,   74,   74,   75,   69,   69,   69,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   76,   69,   69,   80,
       78,   79,   78,   79,   81,   87,   78,   79,   82,   78,
       79,  228,   89,   78,   79,  103,  104,   78,   79,  124,
      124,  129,   83,   77,   89,   77,   77,   77,  214,   77,
       77,   77,   90,   77,   77,  116,   77,   77,   77,   78,
       79,   77,  167,  114,   90,  124,  125,  130,   77,   85,

       85,   85,   85,   77,  140,   77,   77,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   77,  141,   77,   77,  131,   77,   77,
       77,  168,   77,   77,   77,  227,   77,   77,   88,   91,
       77,   92,   78,   79,   93,  126,  126,   78,   79,  132,
       88,   77,   94,   94,   94,   94,   95,   89,   77,   77,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   96,   90,   77,   77,
       97,   77,   77,   77,  129,   77,   77,   77,   98,   77,
       77,   88,   92,   77,   99,   78,   79,  100,  101,   78,

      230,  161,  230,   88,   77,  102,  102,  102,  102,   95,
      130,   77,   77,   94,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,   96,
      226,   77,   77,  140,   77,   77,   77,  116,   77,   77,
       77,  131,   77,   77,  119,   77,   77,   77,   77,   92,
      105,  120,  121,  141,  153,   78,   79,   77,  105,  105,
      105,  105,   77,  132,   77,   77,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,   77,  230,   77,  134,  134,  134,  134,  225,
      152,  124,  124,  215,   80,   94,   92,  102,  106,   81,

      107,  153,  216,   82,  230,  224,   94,  135,   94,  135,
      158,   94,  139,  139,  172,  139,  124,  125,  159,  108,
      116,  160,  126,  126,  139,  181,   78,   79,  109,   77,
      140,   77,   77,   77,  223,   77,   77,   77,   98,   77,
       77,   88,   94,   77,  102,   78,   79,  115,  101,  222,
      141,  103,  104,   88,   77,  115,  115,  115,  115,   95,
      220,   77,   77,  116,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,   96,
      219,   77,   77,  213,   77,   77,   77,  209,   77,   77,
       77,  101,   77,   77,  167,   77,   77,  117,   78,   79,

      117,  180,   78,   79,   78,   79,  201,   77,  117,  117,
      117,  117,   77,  200,   77,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   77,  168,   77,   77,  199,   77,   77,   77,
      230,   77,   77,   77,  193,   77,   77,   88,   94,   77,
       94,   78,   79,  116,  159,   78,   79,  160,  188,   88,
       77,  116,  116,  116,  116,   95,  185,   77,   77,  118,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,   96,  183,   77,   77,  182,
       77,   77,   77,  179,   77,   77,   77,  178,   77,   77,

      230,   77,  122,   77,   78,   79,  122,  163,  132,  163,
       78,   79,  186,   77,  122,  122,  122,  122,   77,  130,
       77,   77,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,   77,  176,
       77,  145,  145,  145,  145,   78,   79,   78,   79,   77,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,   77,  169,   77,   77,   77,
      170,   77,   77,   77,  175,   77,   77,   98,  147,   77,
      148,   78,   79,  149,   94,  174,   94,  101,  173,  186,
       77,  149,  149,  149,  149,   77,  171,   77,   77,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,   77,   94,   77,   94,  154,
      230,   78,   79,  198,  230,  116,  134,  134,  116,   98,
      230,  162,   94,  104,  102,  154,   94,  215,  102,  101,
      155,  102,   94,  230,  102,  106,  221,  107,  135,  156,
      230,  134,  134,  146,  194,  163,  108,  164,  139,  139,
      165,  139,   94,   87,  102,  109,  108,  102,  136,   94,
      139,   94,  154,  135,  153,  109,  140,  230,   94,   94,
       94,   94,  132,   94,  186,   78,   79,  166,  130,   94,
       94,  102,   94,  155,  165,   94,  141,  184,  184,  184,

      184,  128,  156,  187,  127,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  189,  189,  189,  189,  190,   79,  162,  113,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  230,  191,   78,   79,  230,
       78,   79,  185,  230,  112,  192,   86,   94,   84,  102,
      154,   94,  160,  102,  230,   94,  165,  102,   78,   79,
      102,  191,  230,  210,  195,  210,   78,   79,  211,  230,
      192,  108,  218,   79,  209,   78,   79,  211,   78,   79,
      109,   77,  230,   77,   77,   77,  230,   77,   77,   77,

      230,   77,   77,  196,  197,   77,  197,   78,   79,  197,
      212,   78,   79,  211,  230,  196,   77,  197,  197,  197,
      197,   77,  230,   77,   77,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,   77,  230,   77,   77,  230,   77,   77,   77,  230,
       77,   77,   77,  230,   77,   77,  202,  203,   77,  203,
       78,   79,  203,   78,   79,  222,  230,  230,  202,   77,
      203,  203,  203,  203,   77,  230,   77,   77,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,   77,  230,   77,   77,  230,   77,

       77,   77,  230,   77,   77,   77,  230,   77,   77,  230,
       77,   77,   77,   78,   79,  206,  230,  230,  230,  230,
      230,  230,   77,  206,  206,  206,  206,   77,  230,   77,
       77,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,   77,  230,   77,
       77,  230,   77,   77,   77,  230,   77,   77,   77,  230,
       77,   77,  230,   77,   77,   77,   78,   79,  208,  230,
      230,  230,  230,  230,  230,   77,  208,  208,  208,  208,
       77,  230,   77,   77,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

       77,  230,   77,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   77,

      230,   77,  230,  230,   77,  230,   77,   77,   77,   77,
      230,   77,   77,   77,   77,   88,   88,  230,   88,   88,
      230,   88,   88,  230,   88,  123,  123,  230,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  129,  129,  129,  230,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  131,  131,  131,
      131,  230,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  137,
      137,  137,  137,  137,  230,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  139,  139,  230,  139,  139,
      230,  139,  139,  230,  139,  142,  142,  230,  142,  142,
      230,  142,  142,  230,  142,  143,  143,  230,  143,  230,
      143,  143,  144,  230,  144,  230,  144,  230,  230,  144,
      150,  150,  230,  150,  230,  150,  150,  151,  230,  151,
      230,  151,  230,  230,  151,  157,  157,  230,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  177,  230,  177,  230,  230,  177,  204,  204,  230,
      204,  204,  230,  204,  230,  230,  204,  205,  205,  230,
      205,  205,  230,  205,  230,  230,  205,  196,  196,  230,

      196,  196,  230,  196,  230,  230,  196,  202,  202,  230,
      202,  202,  230,  202,  230,  230,  202,  207,  207,  207,
      207,  217,  230,  230,  230,  230,  217,  217,  217,  217,
       17,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230
    } ;

static const flex_int16_t yy_chk[1485] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    5,    5,    7,
        6,    6,    8,  244,    9,    5,  244,    5,    6,   10,
        6,   11,   11,   12,   12,   13,   13,   14,   14,   18,
       18,   20,   20,   21,   21,    7,    9,  228,    8,   22,
       22,   10,   39,   11,   39,   12,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   19,
       24,   24,   26,   26,   19,   28,   29,   29,   19,   28,
       28,  227,   30,   32,   32,   34,   34,   43,   43,   51,
       51,   59,   19,   25,   42,   25,   25,   25,  198,   25,
       25,   25,   30,   25,   25,  198,   25,   25,   25,   25,
       25,   25,  111,   43,   42,   52,   52,   59,   25,   25,

       25,   25,   25,   25,   72,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   72,   25,   31,   62,   31,   31,
       31,  111,   31,   31,   31,  226,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   54,   54,   77,   77,   62,
       31,   31,   31,   31,   31,   31,   31,   88,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   88,   31,   33,
       33,   33,   33,   33,  130,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   79,

       79,  104,  104,   33,   33,   33,   33,   33,   33,   33,
      130,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
      225,   33,   35,  139,   35,   35,   35,  224,   35,   35,
       35,  132,   35,   35,   48,   35,   35,   35,   35,   92,
       35,   48,   48,  139,   92,  105,  105,   35,   35,   35,
       35,   35,   35,  132,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   36,   35,   63,   63,   64,   64,  223,
       91,  124,  124,  201,   80,   36,   91,   36,   36,   80,

       36,   91,  201,   80,   99,  220,   94,   63,   94,   64,
       99,   94,   74,   74,  118,   74,  125,  125,   99,   36,
      118,   99,  126,  126,   74,  148,  148,  148,   36,   44,
       74,   44,   44,   44,  219,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,  218,
       74,  161,  161,   44,   44,   44,   44,   44,   44,   44,
      214,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
      213,   44,   45,  193,   45,   45,   45,  190,   45,   45,
       45,  188,   45,   45,  167,   45,   45,   45,   45,   45,

       45,  147,  180,  180,  147,  147,  175,   45,   45,   45,
       45,   45,   45,  174,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,  167,   45,   47,  173,   47,   47,   47,
      159,   47,   47,   47,  168,   47,   47,   47,   47,   47,
       47,   47,   47,   47,  159,  181,  181,  159,  157,   47,
       47,   47,   47,   47,   47,   47,  154,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,  151,   47,   49,  150,
       49,   49,   49,  144,   49,   49,   49,  143,   49,   49,

      135,   49,   49,   49,   49,   49,   49,  155,  131,  155,
      194,  194,  155,   49,   49,   49,   49,   49,   49,  129,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,  122,
       49,   78,   78,   78,   78,  195,  195,  114,  114,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   85,  114,   85,   85,   85,
      114,   85,   85,   85,  121,   85,   85,  207,   85,   85,
       85,   85,   85,   85,  163,  120,  163,  207,  119,  163,
       85,   85,   85,   85,   85,   85,  117,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   93,   85,   93,   93,
      100,  169,  169,  172,  102,  116,  133,  133,  172,  217,
      107,  106,  100,  103,  100,  100,  102,  215,  102,  217,
       93,  102,  107,  108,  107,  107,  215,  107,  133,   93,
      109,  134,  134,   83,  169,  108,  100,  108,  142,  142,
      108,  142,  109,   82,  109,  100,  107,  109,   65,  153,
      142,  153,  153,  134,  153,  107,  142,  164,  156,  186,
      156,  186,   60,  156,  186,  212,  212,  109,   57,  164,
      187,  164,  187,  153,  164,  187,  142,  152,  152,  152,

      152,   56,  153,  156,   55,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  158,  158,  158,  158,  162,  162,  162,   41,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  160,  162,  170,  170,  165,
      185,  185,  185,  166,   40,  162,   27,  160,   23,  160,
      160,  165,  160,  165,   17,  166,  165,  166,  216,  216,
      166,  185,    0,  191,  170,  191,  191,  191,  191,    0,
      185,  160,  209,  209,  209,  210,  210,  210,  192,  192,
      160,  171,    0,  171,  171,  171,    0,  171,  171,  171,

        0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      192,  211,  211,  211,    0,  171,  171,  171,  171,  171,
      171,  171,    0,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,    0,  171,  176,    0,  176,  176,  176,    0,
      176,  176,  176,    0,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  222,  222,  222,    0,    0,  176,  176,
      176,  176,  176,  176,  176,    0,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,    0,  176,  184,    0,  184,

      184,  184,    0,  184,  184,  184,    0,  184,  184,    0,
      184,  184,  184,  184,  184,  184,    0,    0,    0,    0,
        0,    0,  184,  184,  184,  184,  184,  184,    0,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,    0,  184,
      189,    0,  189,  189,  189,    0,  189,  189,  189,    0,
      189,  189,    0,  189,  189,  189,  189,  189,  189,    0,
        0,    0,    0,    0,    0,  189,  189,  189,  189,  189,
      189,    0,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,    0,  189,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  237,

        0,  237,    0,    0,  237,    0,  237,  237,  237,  237,
        0,  237,  237,  237,  237,  238,  238,    0,  238,  238,
        0,  238,  238,    0,  238,  239,  239,    0,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  240,  240,  240,    0,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  241,  241,  241,
      241,    0,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  243,
      243,  243,  243,  243,    0,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  245,  245,    0,  245,  245,
        0,  245,  245,    0,  245,  246,  246,    0,  246,  246,
        0,  246,  246,    0,  246,  247,  247,    0,  247,    0,
      247,  247,  248,    0,  248,    0,  248,    0,    0,  248,
      249,  249,    0,  249,    0,  249,  249,  250,    0,  250,
        0,  250,    0,    0,  250,  251,  251,    0,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  252,    0,  252,    0,    0,  252,  253,  253,    0,
      253,  253,    0,  253,    0,    0,  253,  254,  254,    0,
      254,  254,    0,  254,    0,    0,  254,  255,  255,    0,

      255,  255,    0,  255,    0,    0,  255,  256,  256,    0,
      256,  256,    0,  256,    0,    0,  256,  257,  257,  257,
      257,  258,    0,    0,    0,    0,  258,  258,  258,  258,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[81] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ITL.l"
#line 8 "ITL.l"
 /*%option yymore*/

#ifdef WIN32
#pragma warning (disable : 4267 4100 4244 4005)
#endif

#include <iostream>
#include "IMessage.h"
#include "ITLparser.h"
#include "ITLparse.hpp"

using namespace std;

#define register		// to get rid of the -Wdeprecated-register

#define YY_NO_INPUT
#define YY_EXTRA_TYPE inscore::ITLparser*
#define YY_USER_ACTION  yyextra->fLine = yylloc->last_line = yylineno; yyextra->fColumn = yylloc->first_column += strlen(yytext); //cerr << "YY_USER_ACTION " << yyextra->fLine << endl;

#define YY_INPUT(buf,result,max_size)   \
   {                                       \
	  char c;                              \
      yyextra->fStream->get( c );                 \
	  if (yyextra->fStream->eof())               \
         result = YY_NULL;                 \
      else {                               \
         buf[0] = c;                       \
         result = 1;                       \
      }                                    \
   }

static int nested;
static int expressionNested=0;

#define YY_NO_UNISTD_H
// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unescape (char * str) {
	int n = strlen(str);
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (int r=0, w=0; r <= n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			char next = str[r+1];
			if ((next != '\'') && (next != '"')) 	// escape only ' and "
				str[w++] = str[r];		// output the escape char 
		}
		else str[w++] = str[r];			// no escape: put the current char at write location 
	}
	return str;
}

// ----------------------------------------------------------------------------------------
// debug utility
#define LDEBUG	0
#if LDEBUG
static  void debug (const char * str, string context) {
	cout << "LEX " << str << " : " << context << endl;
}
#else 
#define debug(a, b)
#endif

// ----------------------------------------------------------------------------------------

#line 1156 "ITLlex.cpp"

#line 79 "ITL.l"
		/* for double quoted strings */

		/* for quoted strings */

		/* javascript section */

		/* evaluable expression section */

		/* osc address */

 /* allowed character set for first identifier char */
 /* allowed character set for first identifier char */
 /* allowed character set for host names
	see RFC952 and RFC1123
 */
 /* allowed character for filename and path as defined for windows 7 with some specification for INScore compatibility: no = ; */
 /* regular expression characters
    as defined by the OSC specification */
 /*ANYCHAR	[^ \t"'\x0a\x0d?+*] */
#line 1178 "ITLlex.cpp"

#define INITIAL 0
#define CMNTLN 1
#define COMMENT 2
#define DQSTR 3
#define QSTR 4
#define JSECTION 5
#define EXPRSECTION 6
#define OSCSECTION 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 116 "ITL.l"


 /* ----------------------------------------- */
 /*	digits */
 /* ----------------------------------------- */
#line 1473 "ITLlex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 231 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 230 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 121 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "ITL.l"
yyextra->fInt = atoi(yytext); return INT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 127 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 129 "ITL.l"
return ENDSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	method requiring messages as argument */
/* ----------------------------------------- */
case 8:
YY_RULE_SETUP
#line 134 "ITL.l"
yyextra->fText = yytext; return EVAL;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 136 "ITL.l"
yylloc->first_column=0; debug("EOL", "");		/* ignore */
	YY_BREAK
/* ----------------------------------------- */
/*	math operators */
/* ----------------------------------------- */
case 10:
YY_RULE_SETUP
#line 141 "ITL.l"
return ADD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "ITL.l"
return MINUS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "ITL.l"
return SUB;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "ITL.l"
return DIV;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "ITL.l"
return MULT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "ITL.l"
return MODULO;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "ITL.l"
return QUEST;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "ITL.l"
return NEG;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "ITL.l"
return EQ;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "ITL.l"
return GREATER;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "ITL.l"
return GREATEREQ;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "ITL.l"
return LESS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "ITL.l"
return LESSEQ;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "ITL.l"
return MIN;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "ITL.l"
return MAX;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 25:
YY_RULE_SETUP
#line 162 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 163 "ITL.l"

	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 166 "ITL.l"

	YY_BREAK
case 29:
YY_RULE_SETUP
#line 167 "ITL.l"
nested++; 
	YY_BREAK
/* check the current context (EXPRSECTION or INITIAL) to close comment */
case 30:
YY_RULE_SETUP
#line 169 "ITL.l"
if (--nested==0) {if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 170 "ITL.l"
nested=1; BEGIN COMMENT;
	YY_BREAK
/* ----------------------------------------- */
/*	variables */
case 32:
YY_RULE_SETUP
#line 174 "ITL.l"
yyextra->fText = &yytext[1]; debug("VARIABLE", yyextra->fText); return VARIABLE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 175 "ITL.l"
yyextra->fText = &yytext[1]; debug("VARIABLE", yyextra->fText); return VARIABLEPOSTINC;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 176 "ITL.l"
yyextra->fText = &yytext[1]; debug("VARIABLE", yyextra->fText); return VARIABLEPOSTDEC;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 177 "ITL.l"
yyextra->fText = &yytext[1]; debug("VARIABLE", yyextra->fText); return VARIABLEPREINC;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 178 "ITL.l"
yyextra->fText = &yytext[1]; debug("VARIABLE", yyextra->fText); return VARIABLEPREDEC; 
	YY_BREAK
/* ----------------------------------------- */
/*	quoted strings */
/* ----------------------------------------- */
case 37:
YY_RULE_SETUP
#line 183 "ITL.l"
BEGIN DQSTR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 184 "ITL.l"
yyextra->fText = ""; debug("EMPTY STRING", yytext); return STRING;;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 185 "ITL.l"
BEGIN QSTR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 186 "ITL.l"
yyextra->fText = ""; debug("EMPTY STRING", yytext); return STRING;;
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 188 "ITL.l"
if (!expressionNested){ yyextra->fText = unescape(yytext); debug("STRING", yytext); return STRING;} 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 189 "ITL.l"
yyextra->fText += string("\"") + unescape(yytext) + "\"";
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 190 "ITL.l"
if (expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 192 "ITL.l"
if (!expressionNested){ yyextra->fText = unescape(yytext); return STRING;} 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 193 "ITL.l"
yyextra->fText += string("'") + unescape(yytext) + "'";
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 194 "ITL.l"
if (expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
/* ----------------------------------------- */
/*	identifiers */
/* ----------------------------------------- */
case 47:
YY_RULE_SETUP
#line 199 "ITL.l"
yyextra->fText = yytext; return IDENTIFIER;
	YY_BREAK
/* ----------------------------------------- */
/*	hostname and IP */
/* ----------------------------------------- */
case 48:
YY_RULE_SETUP
#line 204 "ITL.l"
yyextra->fText = yytext; yyextra->fText.pop_back(); debug("HOSTNAME", yytext); return HOSTNAME;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 205 "ITL.l"
yyextra->fText = yytext; debug("IPNUM", yytext); return IPNUM;
	YY_BREAK
/* ----------------------------------------- */
/*	non quoted file path */
/* ----------------------------------------- */
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 210 "ITL.l"
yyextra->fText = yytext; debug("FILESTRING", yytext); return STRING;	/*file path without space*/
	YY_BREAK
/* ----------------------------------------- */
/*	scene relative dimensions */
/* ----------------------------------------- */
case 51:
YY_RULE_SETUP
#line 216 "ITL.l"
yyextra->fText = yytext; debug("FILESTRING", yytext); return STRING;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 217 "ITL.l"
yyextra->fText = yytext; debug("FILESTRING", yytext); return STRING;
	YY_BREAK
/* ----------------------------------------- */
/*	javascript section */
/* ----------------------------------------- */
case 53:
YY_RULE_SETUP
#line 222 "ITL.l"
BEGIN JSECTION;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 223 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 224 "ITL.l"
yyextra->fText = unescape(yytext); return JSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	regular expressions */
/* ----------------------------------------- */
case 56:
YY_RULE_SETUP
#line 229 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 230 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 231 "ITL.l"
yyextra->fText = yytext; debug("RECHAR", yytext); return REGEXP;			/* regular expression */
	YY_BREAK
/* ----------------------------------------- */
/*	OSC address */
/* ----------------------------------------- */
case 59:
YY_RULE_SETUP
#line 236 "ITL.l"
{ yyextra->fText = yytext; BEGIN OSCSECTION; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 237 "ITL.l"
{ yyextra->fText += yytext; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 238 "ITL.l"
{ yyextra->fText += yytext; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 239 "ITL.l"
{ yyextra->fText += yytext; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 240 "ITL.l"
{ yyextra->fText += yytext; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 241 "ITL.l"
{ yyextra->fText += yytext; }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 242 "ITL.l"
{ yyless(0); BEGIN INITIAL; debug("OSCADDRESS", yyextra->fText); return OSCADDRESS; }
	YY_BREAK
/* ----------------------------------------- */
/*	evaluable expression section */
/* ----------------------------------------- */
case 66:
YY_RULE_SETUP
#line 248 "ITL.l"
expressionNested++; yyextra->fText += yytext;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 249 "ITL.l"
yyextra->fText += yytext; if(!--expressionNested){ BEGIN INITIAL; return EXPRESSION;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 250 "ITL.l"
yyextra->fText += yytext;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 251 "ITL.l"
expressionNested = 1; BEGIN EXPRSECTION; yyextra->fText = yytext; yyextra->fExprStartLine = yylloc->last_line;
	YY_BREAK
/* ----------------------------------------- */
/*	basic delimiters and markers */
/* ----------------------------------------- */
case 70:
YY_RULE_SETUP
#line 256 "ITL.l"
return EQUAL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 257 "ITL.l"
return ENDEXPR;			/* end of expression */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 258 "ITL.l"
return VARSTART;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 259 "ITL.l"
return COLON;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 260 "ITL.l"
debug("COMMA", ","); return COMMA;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 261 "ITL.l"
return POINT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 262 "ITL.l"
debug("LEFTPAR", "("); return LEFTPAR;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 263 "ITL.l"
debug("RIGHTPAR", ")"); return RIGHTPAR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 265 "ITL.l"
;   /* eat up space */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CMNTLN):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DQSTR):
case YY_STATE_EOF(QSTR):
case YY_STATE_EOF(JSECTION):
case YY_STATE_EOF(EXPRSECTION):
case YY_STATE_EOF(OSCSECTION):
#line 267 "ITL.l"
return ENDSCRIPT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 269 "ITL.l"
yyextra->fText = yytext; debug("ERR", yyextra->fText); return ERR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 271 "ITL.l"
ECHO;
	YY_BREAK
#line 2000 "ITLlex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 231 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 231 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 230);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 271 "ITL.l"


namespace inscore 
{

void ITLparser::initScanner()
{
	yylex_init(&fScanner);
	yyset_extra(this, fScanner);
}

void ITLparser::destroyScanner()
{
	yylex_destroy(fScanner);
}

} // end namespace


