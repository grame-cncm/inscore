#
# makefile for testing the INScore engine output
# the principle is the following:
# a pdf target generates pdf files for a set of scripts files given in scripts.txt
# 
# a validate target makes the comparison of files generated by different versions
#
###################################################################################
# Tools required to run the validation tests :
#	./INScoreVersion
#	./SendOSC
# these tools are available as source code from the tools folder, you must compile
# them, a makefile is provided.
#
#	./inscore2pdf	a shell script that is included in this folder
#
###################################################################################
# Tools required to run the memory leak tests :
# 	./INScoreNOView : 	the default tool to run the tests
#						should be compiled using the project cmake tool 
#
###################################################################################

.PHONY: tools

version	?= $(shell cat version.txt)
pwd	  = $(shell pwd)
TOOL = ./INScoreNOView
AWK = gawk		# gawk is required for strings manipulation

files 			= $(shell grep -v '^\#' validate/samplescripts.txt)
bundles 		= $(shell grep -v '^\#' validate/bundles.txt)
graphicfiles 	= $(shell grep -v '^\#' validate/graphicscripts.txt)
syncfiles 		= $(shell grep -v '^\#' validate/syncscripts.txt)
javafiles 		= $(shell grep -v '^\#' validate/javascripts.txt)
logfiles 		= $(shell grep -v '^\#' validate/logs.txt)
savefiles 		= $(shell grep -v '^\#' validate/save.txt)
regressionfiles = $(shell grep -v '^\#' validate/regression.txt)
filterfiles		= $(shell grep -v '^\#' validate/filters.txt)
filterinscorefile	= $(shell grep -v '^\#' validate/filtersinscorefile.txt)
mobilefiles		= $(shell grep -v '^\#' validate/mobile.txt)

pdfbundles  	:= $(patsubst ../%.ibundle, $(version)/%.pdf, $(bundles)) 
pdfout  		:= $(patsubst ../%.inscore, $(version)/%.pdf, $(files)) 
pdfgraphicout 	:= $(patsubst ../%.inscore, $(version)/%.pdf, $(graphicfiles))
pdfsyncout 		:= $(patsubst ../%.inscore, $(version)/%.pdf, $(syncfiles))
pdfjavaout 		:= $(patsubst ../%.inscore, $(version)/%.pdf, $(javafiles))
pdfregressionout:= $(patsubst ../%.inscore, $(version)/%.pdf, $(regressionfiles))
pngout  		:= $(patsubst ../%.inscore, $(version)/png/%.png, $(files) $(graphicfiles) $(syncfiles) $(regressionfiles))
logout 			:= $(patsubst ../%.inscore, $(version)/%.log, $(logfiles))
inscoreout 		:= $(patsubst ../%.inscore, $(version)/%.inscore, $(savefiles))
filterout		:= $(patsubst ../%.flt, $(version)/%.out, $(filterfiles))
filteroutinscore	:= $(patsubst %.flt, %.inscore, $(filterfiles))
filteroutref		:= $(patsubst %.flt, %_reference.out, $(filterfiles))

mobileout 		:= $(patsubst ../%.inscore, $(version)mobile/%.pdf, $(mobilefiles))

leakout 	:= $(patsubst ../%.inscore, $(version)/$(TOOL)/%.leak.txt, $(files))
leaksfiles  := $(patsubst ../%.inscore, $(version)/%.leaks.out, $(files))

allpdf 		:= $(shell [ -d $(version) ] && find $(version) -name "*.pdf" 2>/dev/null)
validpdf 	:= $(patsubst %.pdf, %.outpdf, $(allpdf))
validpng 	:= $(patsubst %.png, %.outpng, $(pngout))

allLog 		:= $(shell [ -d $(version) ] && find $(version) -name "*.log" 2>/dev/null)
validlog 	:= $(patsubst %.log, %.outlog, $(allLog))

allinscore 		:= $(shell [ -d $(version) ] && find $(version) -name "*.inscore" 2>/dev/null)
validinscore 	:= $(patsubst %.inscore, %.outinscore, $(allinscore))

allfilter 	:= $(shell [ -d $(version) ] && find $(version) -name "*.out" 2>/dev/null)
validfilter 	:= $(patsubst %.out, %.outfilter, $(allfilter))

validmobile 	:= $(patsubst %.pdf, %.outmobilepdf, $(mobileout))

nodlost	= "definitely lost: 0"
noilost	= "indirectly lost: 0"
noplost	= "possibly lost: 0"


#test:
#	echo $(pdfout)

all:
	@echo "=========================================="
	@echo " Make sure that INScoreViewer is running!"
	@echo "=========================================="
	make log
	make save
	make png
#	make filter

pdf:
	./SendOSC 7000 /ITL/scene reset
	make pdfgraphic
	make pdfsync
	make pdfjava
	make basic
	make pdfregression
	make bundles

png: $(pngout)

log: 
	@echo "----------- Generating log files"
	make _log

save : 
	@echo "----------- Generating inscore files"
	./SendOSC 7000 /ITL/scene reset
	make _save

_log: $(logout)

_save : $(inscoreout)

filter:
	make filterref
	make filterinscore
	make filteroutput

basic:
	@echo "----------- Running basic scripts"
	make files

pdfgraphic:
	@echo "----------- Checking graphical elements"
	make filesgraphic
	
pdfsync:
	@echo "----------- Checking synchronization modes"
	make filessync
	
pdfjava:
	@echo "----------- Checking javascript examples"
	make filesjava
	
pdfregression:
	@echo "----------- Regression tests"
	make filesregression
	
clean: 
	make pdfclean
	make logclean
	make saveclean

pdfclean: 
	rm -f $(pdfout) $(pdfbundles) $(pdfgraphicout) $(pdfsyncout) $(pdfjavaout) $(pdfregressionout)

logclean: 
	rm -f $(logout)

saveclean: 
	rm -f $(inscoreout)

help:
	@echo "Makefile for testing the INScore engine output. Available targets are:"
	@echo " 'all' 		: generates png output files, inscore output files, log files and filter file"
	@echo " 'pdf' 		: generates pdf files for inscore files recursively enclosed in this folder"
	@echo " 'png' 		: generates png files for inscore files"
	@echo " 'validate VERSION=another_version': compares the pdf output with another one"
	@echo " 'pngvalidate VERSION=another_version': compares the png output with another one"
	@echo "" 
	@echo " 'log' 		: generates log files in order to check inscore logs"
	@echo " 'save' 		: generates inscore files in order to check the save method"
	@echo " 'filter'	: generates filter files and reference files in order to check the forward filter method"
	@echo " 'filterref'	: generates filter result reference files"
	@echo " 'filterinscore'	: generates inscore file filter from .flt file"
	@echo " 'filteroutput'	: generates inscore output from current running inscore instance"
	@echo " 'validatefilter': validate filter files with reference files"
	@echo " 'mobile REMOTEIP=XXX LOCALIP=XXX DEVICE=XXX': create pdf file on mobile device with ip REMOTEIP. LOCALIP must be the IP of this computer, DEVICE must be 'android' or 'ios'. See readme.txt and follow the instruction before run this command."
	@echo " 'validatemobile : validate mobile pdf file. See readme.txt and follow the instruction before run this command."
	@echo "  output files are generated under the current INScore version number."
	@echo " 'checkleaks [TOOL=a_check_tool]': check memory leaks using a given tool (default INScoreNOView)"
	@echo " 'tools'     : rebuild the required tools"

tools:
	make -C tools

INScoreVersion:
	make -C tools

validate: $(validpdf) $(validlog) $(validinscore) $(validfilter) $(validpng)
	@echo Validating version $(VERSION) with $(version)


pngvalidate: $(validpng)
	@echo Validating version $(VERSION) with $(version)

validatefilter: $(validfilter)

validatemobile : $(validmobile)

checkleaks: $(leakout)
	make showleaks

showleaks: $(leaksfiles)

files: $(pdfout) $(pngout)
	@./forcepdfdate 20100101120000 $(pdfout)

bundles: $(pdfbundles)
	@./forcepdfdate 20100101120000 $(pdfbundles)

filesgraphic: $(pdfgraphicout)
	@./forcepdfdate 20100101120000 $(pdfgraphicout)

filessync: $(pdfsyncout)
	@./forcepdfdate 20100101120000 $(pdfsyncout)

filesjava: $(pdfjavaout)
	@./forcepdfdate 20100101120000 $(pdfjavaout)
	
filesregression: $(pdfregressionout)
	@./forcepdfdate 20100101120000 $(pdfregressionout)

filterinscore: $(filteroutinscore)

%.inscore: %.flt
	$(AWK) -f filtercreateinscore.awk $< > $@

filteroutput: $(filterout)

filterref: $(filteroutref)

%_reference.out: %.flt
	$(AWK) -f filtercreatescript.awk $< > $<.awk 2> /dev/null
	$(AWK) -f $<.awk $(filterinscorefile) > $@ 2> /dev/null

$(version)/$(TOOL)/%.leak.txt: %.inscore
	@[ -d $(@D) ] || mkdir -p $(@D)
	valgrind --leak-check=full --suppressions=valgrindignored.txt --log-file=$@ $(TOOL) $(pwd)/$<
	
$(version)/%.pdf: ../%.inscore
	@[ -d $(@D) ] || mkdir -p $(@D)
	@./inscore2pdf $< $@
	
$(version)/png/%.png: ../%.inscore
	@[ -d $(@D) ] || mkdir -p $(@D)
	@./inscore2pdf $< $@

$(version)/%.pdf: ../%.ibundle
	@[ -d $(@D) ] || mkdir -p $(@D)
	@./inscore2pdf $< $@

$(version)/%.log: ../%.inscore
	@[ -d $(@D) ] || mkdir -p $(@D)
	@./inscore2log $< $@

$(version)/%.inscore: ../%.inscore
	@[ -d $(@D) ] || mkdir -p $(@D)
	@./inscore2inscore $< $@

$(version)/%.out: ../%.inscore
	@[ -d $(@D) ] || mkdir -p $(@D)
	./forwardFilter $(filterinscorefile) $< > $@

$(version)/%.leaks.out: $(version)/$(TOOL)/%.leak.txt	
	@grep $(nodlost) $< > /dev/null || echo "$< : definitely lost bytes"
	@grep $(noilost) $< > /dev/null || echo "$< : indirectly lost bytes"
	@grep $(noplost) $< > /dev/null || echo "$< : possibly lost bytes"

mobile: $(mobileout)

$(version)mobile/%.pdf: ../%.inscore
	@./inscore2pdf_mobile $< $@ $(REMOTEIP) $(LOCALIP) $(DEVICE)

%.outmobilepdf: %.pdf
	$(eval tmp := $(patsubst $(version)mobile/%, $(VERSION)/%, $<))
	@./forcepdfdate 20100101120000 $< $(tmp)
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)mobile/ignore.$(VERSION)mobile.txt 2>/dev/null || echo _none_))
	@[ -f  $(ignored) ] || (diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open $< $(patsubst $(version)mobile/%, $(VERSION)/%, $<) # to check changes"; true))

%.outpdf: %.pdf
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
	@[ -f  $(ignored) ] || (diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true))

%.outpng: %.png
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
	@[ -f  $(ignored) ] || (diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true))
	
%.outlog: %.log
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
	@[ -f  $(ignored) ] || (diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true))

%.outinscore: %.inscore
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
	@[ -f  $(ignored) ] || (diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true))

%.outfilter: %.out
	$(eval tmp := $(patsubst $(version)/%.out,../%_reference.out,$<))
	@(diff $< $(tmp) 2>/dev/null >/dev/null || echo "open -t $< $(tmp) # to check changes"; true)
